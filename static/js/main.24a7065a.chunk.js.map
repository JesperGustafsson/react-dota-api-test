{"version":3,"sources":["CurrencySelector.js","App.js","reportWebVitals.js","index.js"],"names":["ValueSelector","styled","div","ValueInput","input","CurrencySymbol","CurrencySelecter","select","Selector","CurrencySelector","id","value","currency","setCurrency","currencyTest","setTargetValue","currencyList","currencyData","console","log","default","onChange","e","target","name","map","optionCurrency","index","newValue","replace","type","Swapper","Container","App","useState","setCurrencyData","currencies","setCurrencies","getCurrencies","a","fetch","result","json","newCurrencies","Object","keys","results","useEffect","sourceCurrency","setSourceCurrency","sourceValue","setSourceValue","targetCurrency","setTargetCurrency","targetValue","sourceCurrencyTest","targetCurrencyTest","exchangeRate","setExchangeRate","calculateExchange","newExchange","onClick","oldSourceCurrency","oldTargetCurrency","swapCurrencies","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.24a7065a.chunk.js","sourcesContent":["import React, { memo, useState, useEffect, useRef} from 'react'\r\nimport styled from 'styled-components';\r\n\r\nconst ValueSelector = styled.div`\r\n    background-color: #ffffff;\r\n    align-items: center;\r\n    display: flex;\r\n    width: 100%;\r\n`;\r\nconst ValueInput = styled.input`\r\n    font-size: 16px;\r\n    border: none;\r\n    width: 88%;\r\n    padding: 0.5em;\r\n    padding-left: 0.75em;\r\n\r\n`;\r\n\r\nconst CurrencySymbol = styled.div`\r\n    background-color: rgba(0, 0, 0, 0.05);\r\n    font-size 16px;\r\n    padding: 0.5em;\r\n    font-weight: 900;\r\n    width: 12%;\r\n\r\n`;\r\n\r\nconst CurrencySelecter = styled.select`\r\n    font-size: 16px;\r\n    padding: 0.5em;\r\n    border: none;\r\n    appearance: button;\r\n    width:100%;\r\n    :hover {\r\n        color: orange;\r\n    }\r\n    margin-bottom: 1em;\r\n`;\r\n\r\nconst Selector = styled.div`\r\n    font-size: 16px;\r\n    padding: ;\r\n    border-radius: ;\r\n    width: 100%\r\n\r\n`;\r\nconst CurrencySelector = ( { id, value, currency, currencyTest, setCurrency, setTargetValue, currencyList, currencyData} ) => {\r\n    \r\n\r\n    console.log(\"CurrencySelector >> currencyData: \", currencyData);\r\n\r\n    // for (var currency in currencyData) {\r\n    //     console.log(\"currency(key):: \", currency)\r\n    //     console.log(\"currency[currencyName]\", currencyData[currency][\"currencyName\"])\r\n    //     console.log(\"currency[currencySymbol]\", currencyData[currency][\"currencySymbol\"]);\r\n\r\n        \r\n    // }\r\n\r\n\r\n        return (\r\n            <>\r\n            <Selector key ={id+\"C\"}>\r\n                \r\n                <CurrencySelecter default={currency} key ={id+\"CA\"} value={currency} onChange={e => setCurrency(e.target.value)} name=\"currency\" id=\"currency\">\r\n               \r\n                        {\r\n                        currencyList.map(((optionCurrency, index) => {\r\n                            return (\r\n                                <option value={optionCurrency}>{currencyData[optionCurrency] ? `${currencyData[optionCurrency][\"currencyName\"]}  (${optionCurrency})` : \"NONC\"}</option>);\r\n                        }))\r\n                    } \r\n          \r\n\r\n                </CurrencySelecter>\r\n                <ValueSelector key ={id+\"D\"}>\r\n                    <ValueInput key ={id+\"DA\"} value = {value} onChange = {e => {const newValue = e.target.value.replace(/[^0-9.]/g, '').replace(/(\\..*)\\./g, '$1'); setTargetValue(newValue)}} type=\"text\" name=\"textinputter\"/>\r\n                    <CurrencySymbol key ={id+\"DB\"} >\r\n                        {currencyData[currency] ? currencyData[currency][\"currencySymbol\"] : \"NONC\"}\r\n                    </CurrencySymbol>\r\n                </ValueSelector>\r\n\r\n                \r\n            </Selector> \r\n            </>\r\n\r\n\r\n\r\n/*             <>\r\n            <Selector key ={id+\"C\"}>\r\n                \r\n                <CurrencySelecter default={currency} key ={id+\"CA\"} value={currency} onChange={e => setCurrency(e.target.value)} name=\"currency\" id=\"currency\">\r\n            \r\n                        {\r\n                        currencyList.map(((optionCurrency, index) => {\r\n                            return (\r\n                                <option value={optionCurrency}>{optionCurrency}</option>);\r\n                        }))\r\n                    } \r\n\r\n\r\n                </CurrencySelecter>\r\n                <ValueSelector key ={id+\"D\"}>\r\n                    <ValueInput key ={id+\"DA\"} value = {value} onChange = {e => setTargetValue(e.target.value)} type=\"text\" name=\"textinputter\"/>\r\n                    <CurrencySymbol key ={id+\"DB\"} >\r\n                        {currency}\r\n                    </CurrencySymbol>\r\n                </ValueSelector>\r\n\r\n                \r\n            </Selector> \r\n            </> */\r\n        )\r\n\r\n    };\r\n\r\n    export default CurrencySelector","import React, { memo, useState, useEffect, useRef} from 'react';\nimport CurrencySelector from './CurrencySelector';\nimport styled from 'styled-components';\n\n\n\nconst App = () => {\n\n    // API KEY: 4babd9e1aa4a8bf230ae79e747643be7 fixer.io\n    // API KEY: 87b4f9fb2be631bed0c8 currconv\n\n\n    const [currencyData, setCurrencyData] = useState([\"USD\", \"SEK\"])\n    const [currencies, setCurrencies] = useState([\"USD\", \"SEK\"])\n \n    const getCurrencies = async () => {\n      console.log(\"getCurrencies() START\");\n      const result = await fetch(`https://free.currconv.com/api/v7/currencies?&apiKey=87b4f9fb2be631bed0c8`)\n      console.log(\"result from API\", result);\n      let json;\n\n      if (result) {\n        json = await result.json();\n        console.log(\"JSON from result\", json);\n      }\n      const newCurrencies = Object.keys(json.results);\n      console.log(\"newCurrencies: \", newCurrencies)\n      setCurrencyData(json.results);\n\n      setCurrencies(newCurrencies);\n\n    } \n\n    useEffect(() => {\n      getCurrencies();\n    }, [])\n\n\n    useEffect(() => {\n      console.log(\"A USESTATE HAS CHANGED\");\n    }, )\n\n    const [sourceCurrency, setSourceCurrency] = useState(\"SEK\");\n    const [sourceValue, setSourceValue] = useState(100);\n\n    const [targetCurrency, setTargetCurrency] = useState(\"EUR\")\n    const [targetValue, setTargetValue] = useState(300);\n\n    const [sourceCurrencyTest, setSourceCurrencyTest] = useState();\n    const [targetCurrencyTest, setTargetCurrencyTest] = useState();\n\n    const [exchangeRate, setExchangeRate] = useState(3);\n\n\n    useEffect(() => {\n        \n        console.log(\"CURRENCIES CHANGED: \", sourceCurrency, \" >> \", targetCurrency);\n        calculateExchange();\n\n\n\n    }, [sourceCurrency, targetCurrency])\n\n\n    const calculateExchange = async () => {\n        \n       const result = await fetch(`https://free.currconv.com/api/v7/convert?q=${sourceCurrency}_${targetCurrency}&compact=ultra&apiKey=87b4f9fb2be631bed0c8`)\n      \n       let json;\n      if (result) {\n        json = await result.json();\n   //     alert(\"Limited amounts of API calls, so don't change currency too often please :)\")\n\n        \n\n        const newExchange = (json.[`${sourceCurrency}_${targetCurrency}`])\n/*        const sourceExchange = json.rates[sourceCurrency];\n          const targetExchange = json.rates[targetCurrency];\n          const newExchange = targetExchange/sourceExchange;\n\n          console.log(sourceCurrency, sourceExchange);\n          console.log(targetCurrency, targetExchange);\n          console.log(targetCurrency, \"/\", sourceCurrency, \": \", newExchange); */\n\n          setExchangeRate(newExchange);\n          setTargetValue(sourceValue*newExchange)\n          \n      } else {\n        console.log(\"EXCHANGERATE FETCH FAIL\");\n      }\n\n\n\n        console.log(\"Fetched exchange data...\");\n\n        return;\n\n    }\n\n    \n    useEffect(() => {\n        console.log(\"targetValue useEffect >> \", targetValue);\n    }, [targetValue]) \n\n    useEffect(() => {\n        console.log(\"sourceValue useEffect >> \", sourceValue);\n    }, [sourceValue])\n\n\n\n    const updateFromSource = (value) => {\n        console.log(\"UPDATE FROM SOURCE >> \", value)\n        setSourceValue(value)\n        setTargetValue(value*exchangeRate)\n    }\n\n    const updateFromTarget = (value) => {\n        console.log(\"UPDATE FROM TARGET >> \", value)\n        setSourceValue(value/exchangeRate)\n        setTargetValue(value)\n    }\n\n    const swapCurrencies = () => {\n      console.log(\"Swapping currencies\")\n      const oldSourceCurrency = sourceCurrency;\n      const oldTargetCurrency = targetCurrency;\n      console.log(\"Swapping sourceCurrency\")\n      setSourceCurrency(oldTargetCurrency);\n      console.log(\"Swapping targetCurrency\")\n      setTargetCurrency(oldSourceCurrency);\n      console.log(\"Swapping DONE\")\n    }\n\n    return (\n        <>\n      \n        <Container>\n          <CurrencySelector  \n/*             key = \"A\" \n */            id = \"B\" \n            value={sourceValue} \n            currency={sourceCurrency} \n            currencyTest={sourceCurrencyTest}\n            setCurrency={setSourceCurrency}\n            setTargetValue={updateFromSource}\n            currencyList={currencies}\n            currencyData={currencyData}\n\n          />\n          <Swapper type=\"button\" onClick={e => swapCurrencies()} value=\"⇔\"/>\n          <CurrencySelector  \n            /* key = \"B\" */\n            id = \"B\"\n            value={targetValue} \n            currency={targetCurrency} \n            currencyTest={targetCurrencyTest}\n            setCurrency={setTargetCurrency} \n            setTargetValue={updateFromTarget} \n            currencyList={currencies}\n            currencyData={currencyData}\n          />\n        </Container>\n\n        <h2>Functionality</h2>\n        <p>Currently fetches all currencies at a refresh, meaning if one were to for some reason disappear/appear, it will not be reflected in the list. \n          Could lead to not being able to fetch the exchange rate of the now non-existant currency.\n        </p>\n        <p>\n          Fetches the exchange rate of the two currencies when switching currency via the list.\n        </p>\n        <p>API calls are limited to 100/hour.</p>\n        </>\n    )\n}\n\nconst Swapper = styled.input`\n  background-color: #e7e7e7;\n  font-size: 35px;\n  line-height: 0px;\n  height: 31.5px;\n  width: 25%;\n  border: none;\n  :hover {\n    color: orange;\n    font-weight:900;\n  }\n`;\n\nconst Container = styled.div`\n  \n  background-color: #e7e7e7;\n  padding: 2.5em;\n  margin: 2.5em;\n  display: flex;\n  justify-content: space-between;\n  border-radius: 0.3em;\n  width: 600px;\n\n\n`;\n\nexport default App\n\n\n// import logo from './logo.svg';\n// import './App.css';\n// import Header from './components/Header'\n// import PropTypes from 'prop-types';\n// import Matches from './components/Matches'\n// import {matches} from './database'\n// import Addresses from './components/Addresses'\n\n// function App() {\n\n\n\n\n\n//   return (\n//     <div class=\"container\">\n//       {/* <Matches matches={matches}/> */}\n//       <Addresses />\n//       {}\n//     </div>\n//   );\n// }\n\n\n\n// export default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
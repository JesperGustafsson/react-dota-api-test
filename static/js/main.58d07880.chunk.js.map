{"version":3,"sources":["CurrencySelector.js","App.js","reportWebVitals.js","index.js"],"names":["ValueSelector","styled","div","ValueInput","input","CurrencySymbol","CurrencySelecter","select","Selector","CurrencySelector","id","value","currency","setCurrency","setTargetValue","currencyData","currencyOrder","console","log","default","onChange","e","target","name","map","optionCurrency","index","newValue","replace","type","Swapper","Container","App","useState","SEK","currencyName","currencySymbol","setCurrencyData","setCurrencyOrder","getCurrencies","a","fetch","result","sickList","sickList2","json","key","keyOrder","Object","keys","results","sort","nameOrder","newCurrencyName","push","b","localeCompare","useEffect","sourceCurrency","setSourceCurrency","sourceValue","setSourceValue","targetCurrency","setTargetCurrency","targetValue","exchangeRate","setExchangeRate","calculateExchange","newExchange","onClick","oldSourceCurrency","swapCurrencies","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.58d07880.chunk.js","sourcesContent":["import React from 'react'\r\nimport styled from 'styled-components';\r\n\r\nconst ValueSelector = styled.div`\r\n    background-color: #ffffff;\r\n    align-items: center;\r\n    display: flex;\r\n    width: 100%;\r\n`;\r\nconst ValueInput = styled.input`\r\n    font-size: 16px;\r\n    border: none;\r\n    width: 88%;\r\n    padding: 0.5em;\r\n    padding-left: 0.75em;\r\n\r\n`;\r\nconst CurrencySymbol = styled.div`\r\n    background-color: rgba(0, 0, 0, 0.05);\r\n    font-size 16px;\r\n    padding: 0.5em;\r\n    font-weight: 900;\r\n    width: 12%;\r\n\r\n`;\r\nconst CurrencySelecter = styled.select`\r\n    font-size: 16px;\r\n    padding: 0.5em;\r\n    border: none;\r\n    appearance: button;\r\n    width:100%;\r\n    :hover {\r\n        color: orange;\r\n    }\r\n    margin-bottom: 1em;\r\n`;\r\nconst Selector = styled.div`\r\n    font-size: 16px;\r\n    padding: ;\r\n    border-radius: ;\r\n    width: 100%\r\n\r\n`;\r\n\r\nconst CurrencySelector = ( { id, value, currency, setCurrency, setTargetValue, currencyData, currencyOrder} ) => {\r\n    \r\n\r\n    return (\r\n       \r\n        <>\r\n        {console.log(\"CurrencySelector\", id, \">> Render\")}\r\n        <Selector key ={id+\"C\"}>\r\n            \r\n            <CurrencySelecter default={currency} key ={id+\"CA\"} value={currency} onChange={e => setCurrency(e.target.value)} name=\"currency\" id=\"currency\">\r\n                {console.log(\"CurrencySelecter\", id, \">> Render\")}\r\n                {\r\n       //             Object.keys(currencyData).map(((optionCurrency, index) => {\r\n                        currencyOrder.map(((optionCurrency, index) => {\r\n       //                 console.log(optionCurrency);\r\n                        return (\r\n                            <option key={id+\"CA\"+index}value={optionCurrency[0]}>{currencyData[optionCurrency[0]] ? `${currencyData[optionCurrency[0]][\"currencyName\"]}  (${optionCurrency[0]})` : \"NONC\"}</option>);\r\n                    }))\r\n                } \r\n\r\n            </CurrencySelecter>\r\n            <ValueSelector key ={id+\"D\"}>\r\n                {console.log(\"ValueSelector\", id, \">> Render\")}\r\n                <ValueInput key ={id+\"DA\"} value = {value} onChange = {e => {const newValue = e.target.value.replace(/[^0-9.]/g, '').replace(/(\\..*)\\./g, '$1'); setTargetValue(newValue)}} type=\"text\" name=\"textinputter\"/>\r\n                <CurrencySymbol key ={id+\"DB\"} >\r\n                    {currencyData[currency] ? currencyData[currency][\"currencySymbol\"] : \"NONC\"}\r\n                </CurrencySymbol>\r\n            </ValueSelector>\r\n\r\n            \r\n        </Selector> \r\n        </>\r\n    )\r\n\r\n};\r\n\r\n    export default CurrencySelector","import React, { useState, useEffect } from 'react';\nimport CurrencySelector from './CurrencySelector';\nimport styled from 'styled-components';\n\n    // API KEY: 4babd9e1aa4a8bf230ae79e747643be7 fixer.io\n    // API KEY: 87b4f9fb2be631bed0c8 currcon\n\n\nconst App = () => {\n\n    const [currencyData, setCurrencyData] = useState([{SEK: {\n      currencyName: \"Swedish Krona\",\n      currencySymbol: \"kr\"\n    }}])\n    const [currencyOrder, setCurrencyOrder] = useState([\"SEK\"])\n\n    const getCurrencies = async () => {\n\n      const result = await fetch(`https://free.currconv.com/api/v7/currencies?&apiKey=87b4f9fb2be631bed0c8`);\n      let json;\n      let orderedJson;\n      let sickList = []; \n      let sickList2 = []; \n\n      if (result) {\n        json = await result.json();\n        \n        //Sorting based on ID of currency\n        const keyOrder = Object.keys(json.results).sort();\n        setCurrencyOrder(keyOrder);\n\n        //Sorting based on NAME of currency\n        let nameOrder = [];\n\n        for (var key in keyOrder) {\n          let newCurrencyName = json.results.[keyOrder[key]].currencyName\n          sickList.push([keyOrder[key], newCurrencyName]);\n          console.log(newCurrencyName);\n          nameOrder.push(newCurrencyName);\n        }\n\n        sickList2 = [...sickList].sort((a, b) =>  a[1].localeCompare(b[1]));\n\n\n        console.log('json.results', json.results);\n        console.log('keyOrder', keyOrder);\n        console.log('nameOrder', nameOrder);\n        console.log('sickList', sickList);\n        console.log('sickList2', sickList2);\n\n      }\n       setCurrencyData(json.results);\n       setCurrencyOrder(sickList2);\n\n    } \n\n    useEffect(() => {\n      getCurrencies();\n    }, [])\n\n    useEffect(() => {\n      console.log(\"A USESTATE HAS CHANGED\");\n    }, )\n\n    const [sourceCurrency, setSourceCurrency] = useState(\"SEK\");\n    const [sourceValue, setSourceValue] = useState(1);\n\n    const [targetCurrency, setTargetCurrency] = useState(\"EUR\")\n    const [targetValue, setTargetValue] = useState(0.1);\n\n    const [exchangeRate, setExchangeRate] = useState(0.1);\n\n    useEffect(() => {\n        calculateExchange();\n\n    }, [sourceCurrency, targetCurrency])\n\n\n    const calculateExchange = async () => {\n        \n      const result = await fetch(`https://free.currconv.com/api/v7/convert?q=${sourceCurrency}_${targetCurrency}&compact=ultra&apiKey=87b4f9fb2be631bed0c8`)\n      \n      let json;\n      if (result) {\n        json = await result.json();\n        const newExchange = (json.[`${sourceCurrency}_${targetCurrency}`])\n\n        setExchangeRate(newExchange);\n        setTargetValue(sourceValue*newExchange)\n          \n      } else {\n        console.log(\"EXCHANGERATE FETCH FAIL\");\n      }\n\n    }\n\n    const updateFromSource = (value) => {\n        setSourceValue(value)\n        setTargetValue(value*exchangeRate)\n    }\n\n    const updateFromTarget = (value) => {\n        setSourceValue(value/exchangeRate)\n        setTargetValue(value)\n    }\n\n    const swapCurrencies = () => {\n      const oldSourceCurrency = sourceCurrency;\n      const oldTargetCurrency = targetCurrency;\n      setSourceCurrency(oldTargetCurrency);\n      setTargetCurrency(oldSourceCurrency);\n    }\n\n    return (\n        <>\n      \n        <Container>\n          <CurrencySelector  \n            key = \"A\" \n            id = \"A\" \n            value={sourceValue} \n            currency={sourceCurrency} \n            setCurrency={setSourceCurrency}\n            setTargetValue={updateFromSource}\n            currencyData={currencyData}\n            currencyOrder={currencyOrder}\n          />\n\n          <Swapper type=\"button\" onClick={e => swapCurrencies()} value=\"⇔\"/>\n          \n          <CurrencySelector  \n            key = \"B\" \n            id = \"B\"\n            value={targetValue} \n            currency={targetCurrency} \n            setCurrency={setTargetCurrency} \n            setTargetValue={updateFromTarget} \n            currencyData={currencyData}\n            currencyOrder={currencyOrder}\n\n          />\n\n        </Container>\n\n        <h2>Functionality</h2>\n        <p>Currently fetches all currencies at a refresh, meaning if one were to for some reason disappear/appear, it will not be reflected in the list. \n          Could lead to not being able to fetch the exchange rate of the now non-existant currency.\n        </p>\n        <p>\n          Fetches the exchange rate of the two currencies when switching currency via the list.\n        </p>\n        <p>API calls are limited to 100/hour.</p>\n        </>\n    )\n}\n\nconst Swapper = styled.input`\n  background-color: #e7e7e7;\n  font-size: 35px;\n  line-height: 0px;\n  height: 31.5px;\n  width: 25%;\n  border: none;\n  :hover {\n    color: orange;\n    font-weight:900;\n  }\n`;\nconst Container = styled.div`\n  \n  background-color: #e7e7e7;\n  padding: 2.5em;\n  margin: 2.5em;\n  display: flex;\n  justify-content: space-between;\n  border-radius: 0.3em;\n  width: 600px;\n\n\n`;\n\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}